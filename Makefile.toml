[env]
APP_VERSION = "${CARGO_MAKE_CRATE_VERSION}"
GIT_HASH_SHORT = { script = ["git rev-parse --short HEAD"] }
PKG_WEB_VERSION = { script = ["cat package.json | jq -r .version"] }
DOCKER_IMAGE_NAME = "ghcr.io/riipandi/${CARGO_MAKE_CRATE_NAME}"
DOCKER_IMAGE_VERSION = "v${APP_VERSION}-${GIT_HASH_SHORT}"
CONTAINER_NAME = "${CARGO_MAKE_CRATE_NAME}"
BIND_PORT = 9090

# --------------------------------------------------------------------------------------------------
# Primary tasks definition
# --------------------------------------------------------------------------------------------------

[tasks.cleanup]
command = "killall"
args = ["cargo-make"]

[tasks.dev]
# Unstable, issue: still watching after ctrl+c
# run_task = { name = ["watch-frontend", "watch-server"], fork = true, parallel = true, cleanup_task = "cleanup" }
command = "pnpm"
args = ["concurrently", "--kill-others", "cargo watch -qcx 'run -- --address 127.0.0.1'", "'pnpm dev'"]

[tasks.watch-server]
command = "cargo"
args = ["run", "--", "--address", "127.0.0.1"]
watch = true

[tasks.watch-frontend]
command = "pnpm"
args = ["dev"]
workspace = false
watch = false

[tasks.run]
command = "cargo"
args = ["run", "--release", "--", "--address", "127.0.0.1"]
dependencies = ["format-rs", "build-frontend"]

[tasks.build]
command = "cargo"
args = ["build", "--release", "--locked"]
dependencies = ["clean", "format-rs", "build-frontend"]

[tasks.build-frontend]
command = "pnpm"
args = ["build"]
dependencies = ["sync-version", "deps-npm", "format-ts"]

[tasks.test]
command = "cargo"
args = ["test"]
dependencies = ["clean"]

[tasks.start-compose]
command = "docker-compose"
args = ["-f", "compose-development.yaml", "up", "-d"]

[tasks.stop-compose]
command = "docker-compose"
args = ["-f", "compose-development.yaml", "down", "--remove-orphans"]

# --------------------------------------------------------------------------------------------------
# Secondary tasks definition
# --------------------------------------------------------------------------------------------------

[tasks.clean]
command = "cargo"
args = ["clean"]

[tasks.deps]
run_task = { name = ["deps-npm", "deps-rust"] }

[tasks.deps-npm]
command = "pnpm"

args = ["install"]

[tasks.deps-rust]
command = "cargo"
args = ["update"]

[tasks.format-rs]
install_crate = "rustfmt"
command = "cargo"
args = ["fmt", "--", "--emit=files"]

[tasks.format-ts]
command = "pnpm"
args = ["format"]

[tasks.sync-version]
script = ['sed -i "" "s/\"version\": \"$PKG_WEB_VERSION\"/\"version\": \"$APP_VERSION\"/" package.json']

# --------------------------------------------------------------------------------------------------
# Tasks for deployment, build docker image, and push docker image
# --------------------------------------------------------------------------------------------------

[tasks.docker-build]
dependencies = ["sync-version", "format-rs", "format-ts"]
command = "docker"
args = [
  "build",
  "-f", "Dockerfile",
  "--build-arg", "BIND_PORT=${BIND_PORT}",
  "-t", "${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_VERSION}",
  "-t", "${DOCKER_IMAGE_NAME}:edge",
  "."
]

[tasks.docker-push]
command = "docker"
args = ["push", "-t", "${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_VERSION}", "-t", "${DOCKER_IMAGE_NAME}:edge"]

[tasks.docker-run]
command = "docker"
args = [
  "run", "--rm", "-it",
  "--name", "${CONTAINER_NAME}",
  "--env-file", ".env.docker",
  "-e", "BIND_PORT=9090",
  "-e", "BIND_ADDR=0.0.0.0",
  "-p", "${BIND_PORT}:${BIND_PORT}",
  "${DOCKER_IMAGE_NAME}:edge"
]

[tasks.deploy-fly]
command = "fly"
args = ["-c", "fly-source.toml", "deploy", "--remote-only"]
